
record R (
 pivot : i32,
 arr : i32[]
);

function partition(r :R, low : i32, high : i32) -> R {
    a : i32[] = r.arr;
    p : i32 = a[high];
    i : i32 = low - 1;
    j : i32 = 0;
    for(j = low;j<=high;j=j+1){
        if(a[j] < p){
            i=i+1;
            t : i32 = a[i];
            s : i32 = a[j];
            a[i]=s;
            a[j]=t;
        }
    }

    t : i32 = a[i+1];
    a[i+1]=a[high];
    a[high]=t;
    r.arr = a;
    r.pivot = i + 1;
    r2 : R = rec R(r.pivot, r.arr);
    return r2;
}

function quicksort(r : R, low: i32, high: i32) -> R{

    r2 : R = rec R(r.pivot, r.arr);
    r3 : R = rec R(r2.pivot, r2.arr);
    if(low < high){
        r2  = partition(r,low, high);
        p : i32 = r2.pivot;
        r2   = quicksort(r2,low, p-1);

        r3   = quicksort(r2,p+1, high);
    }
    x : i32[] = r3.arr;
    i : i32 = 0;


    return r3;
}

function ff(i :i32)-> i32{
    return i+15;
}
function main()->i32{
    p:i32[ff(2)] = [4,20,2,1,3,-7,8,100,14,23,0,1,24,50,7,15,11];
    r : R = rec R(0,p);
    r = quicksort(r,0,16);
    i : i32=0;
    x : i32[] = r.arr;
    for(i = 0; i < length(p);i=i+1){
            print(x[i]);
        }
    return 0;
}


main();